part of strings;

const int _ASCII_END = 0x7f;

const int _ASCII_START = 0x0;

const int _C0_END = 0x1f;

const int _C0_START = 0x00;

const int _C1_END = 0x9f;

const int _C1_START = 0x80;

const int _CONTROL_PICTURES_END = 0x243f;

const int _CONTROL_PICTURES_START = 0x2400;

const int _UNICODE_END = 0x10ffff;

const int _DIGIT = 0x1;

const int _LOWER = 0x2;

const int _UNDERSCORE = 0x4;

const int _UPPER = 0x8;

const int _ALPHA = _LOWER | _UPPER;

const int _ALPHA_NUM = _ALPHA | _DIGIT;

const int _VALID = _ALPHA_NUM | _UNDERSCORE;

final _ascii = <int>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 4, 0, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0,
    0];

// TODO: Temporarily until "unicode" is released
final SparseBoolList _invalid = _generateBool([0x378, 0x379, 0x380, 0x383,
    0x38b, 0x38b, 0x38d, 0x38d, 0x3a2, 0x3a2, 0x530, 0x530, 0x557, 0x558, 0x560,
    0x560, 0x588, 0x588, 0x58b, 0x58c, 0x590, 0x590, 0x5c8, 0x5cf, 0x5eb, 0x5ef,
    0x5f5, 0x5ff, 0x61d, 0x61d, 0x70e, 0x70e, 0x74b, 0x74c, 0x7b2, 0x7bf, 0x7fb,
    0x7ff, 0x82e, 0x82f, 0x83f, 0x83f, 0x85c, 0x85d, 0x85f, 0x89f, 0x8b3, 0x8e3,
    0x984, 0x984, 0x98d, 0x98e, 0x991, 0x992, 0x9a9, 0x9a9, 0x9b1, 0x9b1, 0x9b3,
    0x9b5, 0x9ba, 0x9bb, 0x9c5, 0x9c6, 0x9c9, 0x9ca, 0x9cf, 0x9d6, 0x9d8, 0x9db,
    0x9de, 0x9de, 0x9e4, 0x9e5, 0x9fc, 0xa00, 0xa04, 0xa04, 0xa0b, 0xa0e, 0xa11,
    0xa12, 0xa29, 0xa29, 0xa31, 0xa31, 0xa34, 0xa34, 0xa37, 0xa37, 0xa3a, 0xa3b,
    0xa3d, 0xa3d, 0xa43, 0xa46, 0xa49, 0xa4a, 0xa4e, 0xa50, 0xa52, 0xa58, 0xa5d,
    0xa5d, 0xa5f, 0xa65, 0xa76, 0xa80, 0xa84, 0xa84, 0xa8e, 0xa8e, 0xa92, 0xa92,
    0xaa9, 0xaa9, 0xab1, 0xab1, 0xab4, 0xab4, 0xaba, 0xabb, 0xac6, 0xac6, 0xaca,
    0xaca, 0xace, 0xacf, 0xad1, 0xadf, 0xae4, 0xae5, 0xaf2, 0xb00, 0xb04, 0xb04,
    0xb0d, 0xb0e, 0xb11, 0xb12, 0xb29, 0xb29, 0xb31, 0xb31, 0xb34, 0xb34, 0xb3a,
    0xb3b, 0xb45, 0xb46, 0xb49, 0xb4a, 0xb4e, 0xb55, 0xb58, 0xb5b, 0xb5e, 0xb5e,
    0xb64, 0xb65, 0xb78, 0xb81, 0xb84, 0xb84, 0xb8b, 0xb8d, 0xb91, 0xb91, 0xb96,
    0xb98, 0xb9b, 0xb9b, 0xb9d, 0xb9d, 0xba0, 0xba2, 0xba5, 0xba7, 0xbab, 0xbad,
    0xbba, 0xbbd, 0xbc3, 0xbc5, 0xbc9, 0xbc9, 0xbce, 0xbcf, 0xbd1, 0xbd6, 0xbd8,
    0xbe5, 0xbfb, 0xbff, 0xc04, 0xc04, 0xc0d, 0xc0d, 0xc11, 0xc11, 0xc29, 0xc29,
    0xc3a, 0xc3c, 0xc45, 0xc45, 0xc49, 0xc49, 0xc4e, 0xc54, 0xc57, 0xc57, 0xc5a,
    0xc5f, 0xc64, 0xc65, 0xc70, 0xc77, 0xc80, 0xc80, 0xc84, 0xc84, 0xc8d, 0xc8d,
    0xc91, 0xc91, 0xca9, 0xca9, 0xcb4, 0xcb4, 0xcba, 0xcbb, 0xcc5, 0xcc5, 0xcc9,
    0xcc9, 0xcce, 0xcd4, 0xcd7, 0xcdd, 0xcdf, 0xcdf, 0xce4, 0xce5, 0xcf0, 0xcf0,
    0xcf3, 0xd00, 0xd04, 0xd04, 0xd0d, 0xd0d, 0xd11, 0xd11, 0xd3b, 0xd3c, 0xd45,
    0xd45, 0xd49, 0xd49, 0xd4f, 0xd56, 0xd58, 0xd5f, 0xd64, 0xd65, 0xd76, 0xd78,
    0xd80, 0xd81, 0xd84, 0xd84, 0xd97, 0xd99, 0xdb2, 0xdb2, 0xdbc, 0xdbc, 0xdbe,
    0xdbf, 0xdc7, 0xdc9, 0xdcb, 0xdce, 0xdd5, 0xdd5, 0xdd7, 0xdd7, 0xde0, 0xde5,
    0xdf0, 0xdf1, 0xdf5, 0xe00, 0xe3b, 0xe3e, 0xe5c, 0xe80, 0xe83, 0xe83, 0xe85,
    0xe86, 0xe89, 0xe89, 0xe8b, 0xe8c, 0xe8e, 0xe93, 0xe98, 0xe98, 0xea0, 0xea0,
    0xea4, 0xea4, 0xea6, 0xea6, 0xea8, 0xea9, 0xeac, 0xeac, 0xeba, 0xeba, 0xebe,
    0xebf, 0xec5, 0xec5, 0xec7, 0xec7, 0xece, 0xecf, 0xeda, 0xedb, 0xee0, 0xeff,
    0xf48, 0xf48, 0xf6d, 0xf70, 0xf98, 0xf98, 0xfbd, 0xfbd, 0xfcd, 0xfcd, 0xfdb,
    0xfff, 0x10c6, 0x10c6, 0x10c8, 0x10cc, 0x10ce, 0x10cf, 0x1249, 0x1249, 0x124e,
    0x124f, 0x1257, 0x1257, 0x1259, 0x1259, 0x125e, 0x125f, 0x1289, 0x1289, 0x128e,
    0x128f, 0x12b1, 0x12b1, 0x12b6, 0x12b7, 0x12bf, 0x12bf, 0x12c1, 0x12c1, 0x12c6,
    0x12c7, 0x12d7, 0x12d7, 0x1311, 0x1311, 0x1316, 0x1317, 0x135b, 0x135c, 0x137d,
    0x137f, 0x139a, 0x139f, 0x13f5, 0x13ff, 0x169d, 0x169f, 0x16f9, 0x16ff, 0x170d,
    0x170d, 0x1715, 0x171f, 0x1737, 0x173f, 0x1754, 0x175f, 0x176d, 0x176d, 0x1771,
    0x1771, 0x1774, 0x177f, 0x17de, 0x17df, 0x17ea, 0x17ef, 0x17fa, 0x17ff, 0x180f,
    0x180f, 0x181a, 0x181f, 0x1878, 0x187f, 0x18ab, 0x18af, 0x18f6, 0x18ff, 0x191f,
    0x191f, 0x192c, 0x192f, 0x193c, 0x193f, 0x1941, 0x1943, 0x196e, 0x196f, 0x1975,
    0x197f, 0x19ac, 0x19af, 0x19ca, 0x19cf, 0x19db, 0x19dd, 0x1a1c, 0x1a1d, 0x1a5f,
    0x1a5f, 0x1a7d, 0x1a7e, 0x1a8a, 0x1a8f, 0x1a9a, 0x1a9f, 0x1aae, 0x1aaf, 0x1abf,
    0x1aff, 0x1b4c, 0x1b4f, 0x1b7d, 0x1b7f, 0x1bf4, 0x1bfb, 0x1c38, 0x1c3a, 0x1c4a,
    0x1c4c, 0x1c80, 0x1cbf, 0x1cc8, 0x1ccf, 0x1cf7, 0x1cf7, 0x1cfa, 0x1cff, 0x1df6,
    0x1dfb, 0x1f16, 0x1f17, 0x1f1e, 0x1f1f, 0x1f46, 0x1f47, 0x1f4e, 0x1f4f, 0x1f58,
    0x1f58, 0x1f5a, 0x1f5a, 0x1f5c, 0x1f5c, 0x1f5e, 0x1f5e, 0x1f7e, 0x1f7f, 0x1fb5,
    0x1fb5, 0x1fc5, 0x1fc5, 0x1fd4, 0x1fd5, 0x1fdc, 0x1fdc, 0x1ff0, 0x1ff1, 0x1ff5,
    0x1ff5, 0x1fff, 0x1fff, 0x2065, 0x2065, 0x2072, 0x2073, 0x208f, 0x208f, 0x209d,
    0x209f, 0x20be, 0x20cf, 0x20f1, 0x20ff, 0x218a, 0x218f, 0x23fb, 0x23ff, 0x2427,
    0x243f, 0x244b, 0x245f, 0x2b74, 0x2b75, 0x2b96, 0x2b97, 0x2bba, 0x2bbc, 0x2bc9,
    0x2bc9, 0x2bd2, 0x2bff, 0x2c2f, 0x2c2f, 0x2c5f, 0x2c5f, 0x2cf4, 0x2cf8, 0x2d26,
    0x2d26, 0x2d28, 0x2d2c, 0x2d2e, 0x2d2f, 0x2d68, 0x2d6e, 0x2d71, 0x2d7e, 0x2d97,
    0x2d9f, 0x2da7, 0x2da7, 0x2daf, 0x2daf, 0x2db7, 0x2db7, 0x2dbf, 0x2dbf, 0x2dc7,
    0x2dc7, 0x2dcf, 0x2dcf, 0x2dd7, 0x2dd7, 0x2ddf, 0x2ddf, 0x2e43, 0x2e7f, 0x2e9a,
    0x2e9a, 0x2ef4, 0x2eff, 0x2fd6, 0x2fef, 0x2ffc, 0x2fff, 0x3040, 0x3040, 0x3097,
    0x3098, 0x3100, 0x3104, 0x312e, 0x3130, 0x318f, 0x318f, 0x31bb, 0x31bf, 0x31e4,
    0x31ef, 0x321f, 0x321f, 0x32ff, 0x32ff, 0x3401, 0x4db4, 0x4db6, 0x4dbf, 0x4e01,
    0x9fcb, 0x9fcd, 0x9fff, 0xa48d, 0xa48f, 0xa4c7, 0xa4cf, 0xa62c, 0xa63f, 0xa69e,
    0xa69e, 0xa6f8, 0xa6ff, 0xa78f, 0xa78f, 0xa7ae, 0xa7af, 0xa7b2, 0xa7f6, 0xa82c,
    0xa82f, 0xa83a, 0xa83f, 0xa878, 0xa87f, 0xa8c5, 0xa8cd, 0xa8da, 0xa8df, 0xa8fc,
    0xa8ff, 0xa954, 0xa95e, 0xa97d, 0xa97f, 0xa9ce, 0xa9ce, 0xa9da, 0xa9dd, 0xa9ff,
    0xa9ff, 0xaa37, 0xaa3f, 0xaa4e, 0xaa4f, 0xaa5a, 0xaa5b, 0xaac3, 0xaada, 0xaaf7,
    0xab00, 0xab07, 0xab08, 0xab0f, 0xab10, 0xab17, 0xab1f, 0xab27, 0xab27, 0xab2f,
    0xab2f, 0xab60, 0xab63, 0xab66, 0xabbf, 0xabee, 0xabef, 0xabfa, 0xabff, 0xac01,
    0xd7a2, 0xd7a4, 0xd7af, 0xd7c7, 0xd7ca, 0xd7fc, 0xd7ff, 0xd801, 0xdb7e, 0xdb81,
    0xdbfe, 0xdc01, 0xdffe, 0xe001, 0xf8fe, 0xfa6e, 0xfa6f, 0xfada, 0xfaff, 0xfb07,
    0xfb12, 0xfb18, 0xfb1c, 0xfb37, 0xfb37, 0xfb3d, 0xfb3d, 0xfb3f, 0xfb3f, 0xfb42,
    0xfb42, 0xfb45, 0xfb45, 0xfbc2, 0xfbd2, 0xfd40, 0xfd4f, 0xfd90, 0xfd91, 0xfdc8,
    0xfdef, 0xfdfe, 0xfdff, 0xfe1a, 0xfe1f, 0xfe2e, 0xfe2f, 0xfe53, 0xfe53, 0xfe67,
    0xfe67, 0xfe6c, 0xfe6f, 0xfe75, 0xfe75, 0xfefd, 0xfefe, 0xff00, 0xff00, 0xffbf,
    0xffc1, 0xffc8, 0xffc9, 0xffd0, 0xffd1, 0xffd8, 0xffd9, 0xffdd, 0xffdf, 0xffe7,
    0xffe7, 0xffef, 0xfff8, 0xfffe, 0xffff, 0x1000c, 0x1000c, 0x10027, 0x10027,
    0x1003b, 0x1003b, 0x1003e, 0x1003e, 0x1004e, 0x1004f, 0x1005e, 0x1007f, 0x100fb,
    0x100ff, 0x10103, 0x10106, 0x10134, 0x10136, 0x1018d, 0x1018f, 0x1019c, 0x1019f,
    0x101a1, 0x101cf, 0x101fe, 0x1027f, 0x1029d, 0x1029f, 0x102d1, 0x102df, 0x102fc,
    0x102ff, 0x10324, 0x1032f, 0x1034b, 0x1034f, 0x1037b, 0x1037f, 0x1039e, 0x1039e,
    0x103c4, 0x103c7, 0x103d6, 0x103ff, 0x1049e, 0x1049f, 0x104aa, 0x104ff, 0x10528,
    0x1052f, 0x10564, 0x1056e, 0x10570, 0x105ff, 0x10737, 0x1073f, 0x10756, 0x1075f,
    0x10768, 0x107ff, 0x10806, 0x10807, 0x10809, 0x10809, 0x10836, 0x10836, 0x10839,
    0x1083b, 0x1083d, 0x1083e, 0x10856, 0x10856, 0x1089f, 0x108a6, 0x108b0, 0x108ff,
    0x1091c, 0x1091e, 0x1093a, 0x1093e, 0x10940, 0x1097f, 0x109b8, 0x109bd, 0x109c0,
    0x109ff, 0x10a04, 0x10a04, 0x10a07, 0x10a0b, 0x10a14, 0x10a14, 0x10a18, 0x10a18,
    0x10a34, 0x10a37, 0x10a3b, 0x10a3e, 0x10a48, 0x10a4f, 0x10a59, 0x10a5f, 0x10aa0,
    0x10abf, 0x10ae7, 0x10aea, 0x10af7, 0x10aff, 0x10b36, 0x10b38, 0x10b56, 0x10b57,
    0x10b73, 0x10b77, 0x10b92, 0x10b98, 0x10b9d, 0x10ba8, 0x10bb0, 0x10bff, 0x10c49,
    0x10e5f, 0x10e7f, 0x10fff, 0x1104e, 0x11051, 0x11070, 0x1107e, 0x110c2, 0x110cf,
    0x110e9, 0x110ef, 0x110fa, 0x110ff, 0x11135, 0x11135, 0x11144, 0x1114f, 0x11177,
    0x1117f, 0x111c9, 0x111cc, 0x111ce, 0x111cf, 0x111db, 0x111e0, 0x111f5, 0x111ff,
    0x11212, 0x11212, 0x1123e, 0x112af, 0x112eb, 0x112ef, 0x112fa, 0x11300, 0x11304,
    0x11304, 0x1130d, 0x1130e, 0x11311, 0x11312, 0x11329, 0x11329, 0x11331, 0x11331,
    0x11334, 0x11334, 0x1133a, 0x1133b, 0x11345, 0x11346, 0x11349, 0x1134a, 0x1134e,
    0x11356, 0x11358, 0x1135c, 0x11364, 0x11365, 0x1136d, 0x1136f, 0x11375, 0x1147f,
    0x114c8, 0x114cf, 0x114da, 0x1157f, 0x115b6, 0x115b7, 0x115ca, 0x115ff, 0x11645,
    0x1164f, 0x1165a, 0x1167f, 0x116b8, 0x116bf, 0x116ca, 0x1189f, 0x118f3, 0x118fe,
    0x11900, 0x11abf, 0x11af9, 0x11fff, 0x12399, 0x123ff, 0x1246f, 0x1246f, 0x12475,
    0x12fff, 0x1342f, 0x167ff, 0x16a39, 0x16a3f, 0x16a5f, 0x16a5f, 0x16a6a, 0x16a6d,
    0x16a70, 0x16acf, 0x16aee, 0x16aef, 0x16af6, 0x16aff, 0x16b46, 0x16b4f, 0x16b5a,
    0x16b5a, 0x16b62, 0x16b62, 0x16b78, 0x16b7c, 0x16b90, 0x16eff, 0x16f45, 0x16f4f,
    0x16f7f, 0x16f8e, 0x16fa0, 0x1afff, 0x1b002, 0x1bbff, 0x1bc6b, 0x1bc6f, 0x1bc7d,
    0x1bc7f, 0x1bc89, 0x1bc8f, 0x1bc9a, 0x1bc9b, 0x1bca4, 0x1cfff, 0x1d0f6, 0x1d0ff,
    0x1d127, 0x1d128, 0x1d1de, 0x1d1ff, 0x1d246, 0x1d2ff, 0x1d357, 0x1d35f, 0x1d372,
    0x1d3ff, 0x1d455, 0x1d455, 0x1d49d, 0x1d49d, 0x1d4a0, 0x1d4a1, 0x1d4a3, 0x1d4a4,
    0x1d4a7, 0x1d4a8, 0x1d4ad, 0x1d4ad, 0x1d4ba, 0x1d4ba, 0x1d4bc, 0x1d4bc, 0x1d4c4,
    0x1d4c4, 0x1d506, 0x1d506, 0x1d50b, 0x1d50c, 0x1d515, 0x1d515, 0x1d51d, 0x1d51d,
    0x1d53a, 0x1d53a, 0x1d53f, 0x1d53f, 0x1d545, 0x1d545, 0x1d547, 0x1d549, 0x1d551,
    0x1d551, 0x1d6a6, 0x1d6a7, 0x1d7cc, 0x1d7cd, 0x1d800, 0x1e7ff, 0x1e8c5, 0x1e8c6,
    0x1e8d7, 0x1edff, 0x1ee04, 0x1ee04, 0x1ee20, 0x1ee20, 0x1ee23, 0x1ee23, 0x1ee25,
    0x1ee26, 0x1ee28, 0x1ee28, 0x1ee33, 0x1ee33, 0x1ee38, 0x1ee38, 0x1ee3a, 0x1ee3a,
    0x1ee3c, 0x1ee41, 0x1ee43, 0x1ee46, 0x1ee48, 0x1ee48, 0x1ee4a, 0x1ee4a, 0x1ee4c,
    0x1ee4c, 0x1ee50, 0x1ee50, 0x1ee53, 0x1ee53, 0x1ee55, 0x1ee56, 0x1ee58, 0x1ee58,
    0x1ee5a, 0x1ee5a, 0x1ee5c, 0x1ee5c, 0x1ee5e, 0x1ee5e, 0x1ee60, 0x1ee60, 0x1ee63,
    0x1ee63, 0x1ee65, 0x1ee66, 0x1ee6b, 0x1ee6b, 0x1ee73, 0x1ee73, 0x1ee78, 0x1ee78,
    0x1ee7d, 0x1ee7d, 0x1ee7f, 0x1ee7f, 0x1ee8a, 0x1ee8a, 0x1ee9c, 0x1eea0, 0x1eea4,
    0x1eea4, 0x1eeaa, 0x1eeaa, 0x1eebc, 0x1eeef, 0x1eef2, 0x1efff, 0x1f02c, 0x1f02f,
    0x1f094, 0x1f09f, 0x1f0af, 0x1f0b0, 0x1f0c0, 0x1f0c0, 0x1f0d0, 0x1f0d0, 0x1f0f6,
    0x1f0ff, 0x1f10d, 0x1f10f, 0x1f12f, 0x1f12f, 0x1f16c, 0x1f16f, 0x1f19b, 0x1f1e5,
    0x1f203, 0x1f20f, 0x1f23b, 0x1f23f, 0x1f249, 0x1f24f, 0x1f252, 0x1f2ff, 0x1f32d,
    0x1f32f, 0x1f37e, 0x1f37f, 0x1f3cf, 0x1f3d3, 0x1f3f8, 0x1f3ff, 0x1f4ff, 0x1f4ff,
    0x1f54b, 0x1f54f, 0x1f57a, 0x1f57a, 0x1f5a4, 0x1f5a4, 0x1f643, 0x1f644, 0x1f6d0,
    0x1f6df, 0x1f6ed, 0x1f6ef, 0x1f6f4, 0x1f6ff, 0x1f774, 0x1f77f, 0x1f7d5, 0x1f7ff,
    0x1f80c, 0x1f80f, 0x1f848, 0x1f84f, 0x1f85a, 0x1f85f, 0x1f888, 0x1f88f, 0x1f8ae,
    0x1ffff, 0x20001, 0x2a6d5, 0x2a6d7, 0x2a6ff, 0x2a701, 0x2b733, 0x2b735, 0x2b73f,
    0x2b741, 0x2b81c, 0x2b81e, 0x2f7ff, 0x2fa1e, 0xe0000, 0xe0002, 0xe001f, 0xe0080,
    0xe00ff, 0xe01f0, 0xeffff, 0xf0001, 0xffffc, 0xffffe, 0xfffff, 0x100001,
    0x10fffc, 0x10fffe, 0x10ffff]);

/**
 * Returns a string in the form "UpperCamelCase" or "lowerCamelCase".
 *
 * Example:
 *      print(camelize("dart_vm"));
 *      => DartVm
 */
String camelize(String string, [bool lower = false]) {
  if (string == null) {
    throw new ArgumentError("string: $string");
  }

  if (string.length == 0) {
    return string;
  }

  string = string.toLowerCase();
  var capitlize = true;
  var length = string.length;
  var position = 0;
  var remove = false;
  var sb = new StringBuffer();
  for (var i = 0; i < length; i++) {
    var s = string[i];
    var c = s.codeUnitAt(0);
    var flag = 0;
    if (c <= _ASCII_END) {
      flag = _ascii[c];
    }

    if (capitlize && flag & _ALPHA != 0) {
      if (lower && position == 0) {
        sb.write(s);
      } else {
        sb.write(s.toUpperCase());
      }

      capitlize = false;
      remove = true;
      position++;
    } else {
      if (flag & _UNDERSCORE != 0) {
        if (!remove) {
          sb.write(s);
          remove = true;
        }

        capitlize = true;
      } else {
        if (flag & _ALPHA_NUM != 0) {
          capitlize = false;
          remove = true;
        } else {
          capitlize = true;
          remove = false;
          position = 0;
        }

        sb.write(s);
      }
    }
  }

  return sb.toString();
}

/**
 * Returns a string with capitalized first character.
 *
 * Example:
 *     print(capitalize("dart"));
 *     => Dart
 */
String capitalize(String string) {
  if (string == null) {
    throw new ArgumentError("string: $string");
  }

  if (string.length == 0) {
    return string;
  }

  return string[0].toUpperCase() + string.substring(1);
}

/**
 * Returns an escaped string.
 *
 * Example:
 *     print(escape("Hello 'world' \n"));
 *     => Hello \'world\' \n
 */
// TODO: bug: Unregistered unicode characters not detected
String escape(String string, [String encode(int charCode)]) {
  if (string == null) {
    throw new ArgumentError("string: $string");
  }

  if (string.length == 0) {
    return string;
  }

  if (encode == null) {
    encode = toUnicode;
  }

  var sb = new StringBuffer();
  var i = 0;
  for (var c in string.runes) {
    if (c >= _C0_START && c <= _C0_END) {
      switch (c) {
        case 9:
          sb.write("\\t");
          break;
        case 10:
          sb.write("\\n");
          break;
        case 13:
          sb.write("\\r");
          break;
        default:
          sb.write(encode(c));
      }

    } else if (c >= _ASCII_START && c <= _ASCII_END) {
      switch (c) {
        case 34:
          sb.write("\\\"");
          break;
        case 36:
          sb.write("\\\$");
          break;
        case 39:
          sb.write("\\\'");
          break;
        case 92:
          sb.write("\\\\");
          break;
        default:
          sb.write(string[i]);
      }

    } else if (c >= _C1_START && c <= _C1_END) {
      sb.write(encode(c));
    } else if (c >= _CONTROL_PICTURES_START && c <= _CONTROL_PICTURES_END) {
      sb.write(encode(c));
    } else {
      if(c <= _invalid.length - 1 && _invalid[c]) {
        sb.write(encode(c));
      } else {
        sb.write(string[i]);
      }
    }

    i++;
  }

  return sb.toString();
}

/**
 * Returns true if the string does not contain upper case letters; otherwise
 * false;
 *
 * Example:
 *     print(isLowerCase("camelCase"));
 *     => false
 *
 *     print(isLowerCase("dart"));
 *     => true
 *
 *     print(isLowerCase(""));
 *     => false
 */
bool isLowerCase(String string) {
  if (string == null) {
    throw new ArgumentError("string: $string");
  }

  if (string.length == 0) {
    return true;
  }

  var length = string.length;
  for (var i = 0; i < length; i++) {
    var c = string.codeUnitAt(i);
    var flag = 0;
    if (c <= _ASCII_END) {
      flag = _ascii[c];
    }

    if (c <= _ASCII_END) {
      if (flag & _UPPER != 0) {
        return false;
      }
    } else {
      var s = string[i];
      if (s == s.toUpperCase()) {
        return false;
      }
    }
  }

  return true;
}

/**
 * Returns true if the string does not contain lower case letters; otherwise
 * false;
 *
 * Example:
 *     print(isUpperCase("CamelCase"));
 *     => false
 *
 *     print(isUpperCase("DART"));
 *     => true
 *
 *     print(isUpperCase(""));
 *     => false
 */
bool isUpperCase(String string) {
  if (string == null) {
    throw new ArgumentError("string: $string");
  }

  if (string.length == 0) {
    return true;
  }

  var length = string.length;
  for (var i = 0; i < length; i++) {
    var c = string.codeUnitAt(i);
    var flag = 0;
    if (c <= _ASCII_END) {
      flag = _ascii[c];
    }

    if (c <= _ASCII_END) {
      if (flag & _LOWER != 0) {
        return false;
      }
    } else {
      var s = string[i];
      if (s == s.toLowerCase()) {
        return false;
      }
    }
  }

  return true;
}

/**
 * Returns the joined elements of the list if the list is not null; otherwise
 * null.
 *
 * Example:
 *     print(join(null));
 *     => null
 *
 *     print(join([1, 2]));
 *     => 12
 */
String join(List list, [String separator = ""]) {
  if (list == null) {
    return null;
  }

  return list.join(separator);
}

/**
 * Returns a string with reversed order of characters.
 *
 * Example:
 *     print(reverse("hello"));
 *     => olleh
 */
String reverse(String string) {
  if (string == null) {
    throw new ArgumentError("string: $string");
  }

  if (string.length < 2) {
    return string;
  }

  return new String.fromCharCodes(string.codeUnits.reversed);
}

/**
 * Returns true if the string starts with the lower case character; otherwise
 * false;
 *
 * Example:
 *     print(startsWithLowerCase("camelCase"));
 *     => true
 *
 *     print(startsWithLowerCase(""));
 *     => false
 */
bool startsWithLowerCase(String string) {
  if (string == null) {
    throw new ArgumentError("string: $string");
  }

  if (string.length == 0) {
    return false;
  }

  var c = string.codeUnitAt(0);
  var flag = 0;
  if (c <= _ASCII_END) {
    flag = _ascii[c];
  }

  if (c <= _ASCII_END) {
    if (flag & _LOWER != 0) {
      return true;
    }
  } else {
    var s = string[0];
    if (s == s.toLowerCase()) {
      return true;
    }
  }

  return false;
}

/**
 * Returns true if the string starts with the upper case character; otherwise
 * false;
 *
 * Example:
 *     print(startsWithUpperCase("Dart"));
 *     => true
 *
 *     print(startsWithUpperCase(""));
 *     => false
 */
bool startsWithUpperCase(String string) {
  if (string == null) {
    throw new ArgumentError("string: $string");
  }

  if (string.length == 0) {
    return false;
  }

  var c = string.codeUnitAt(0);
  var flag = 0;
  if (c <= _ASCII_END) {
    flag = _ascii[c];
  }

  if (c <= _ASCII_END) {
    if (flag & _UPPER != 0) {
      return true;
    }
  } else {
    var s = string[0];
    if (s == s.toUpperCase()) {
      return true;
    }
  }

  return false;
}

/**
 * Returns an unescaped printable string.
 *
 * Example:
 *     print(toPrintable("Hello 'world' \n"));
 *     => Hello 'world' \n
 */
// TODO: bug: Unregistered unicode characters not detected
String toPrintable(String string) {
  if (string == null) {
    throw new ArgumentError("string: $string");
  }

  if (string.length == 0) {
    return string;
  }

  var sb = new StringBuffer();
  var i = 0;
  for (var c in string.runes) {
    if (c >= _C0_START && c <= _C0_END) {
      switch (c) {
        case 9:
          sb.write("\\t");
          break;
        case 10:
          sb.write("\\n");
          break;
        case 13:
          sb.write("\\r");
          break;
        default:
          sb.write(toUnicode(c));
      }

    } else if (c >= _C1_START && c <= _C1_END) {
      sb.write(toUnicode(c));
    } else if (c >= _CONTROL_PICTURES_START && c <= _CONTROL_PICTURES_END) {
      sb.write(toUnicode(c));
    } else {
      if(c <= _invalid.length - 1 && _invalid[c]) {
        sb.write(toUnicode(c));
      } else {
        sb.write(string[i]);
      }
    }

    i++;
  }

  return sb.toString();
}

/**
 * Returns an Unicode representation of the character code.
 *
 * Example:
 *     print(toUnicode(48));
 *     => \u0030
 */
String toUnicode(int charCode) {
  if (charCode == null || charCode < 0 || charCode > _UNICODE_END) {
    throw new ArgumentError('charCode: $charCode');
  }

  var hex = charCode.toRadixString(16);
  var length = hex.length;
  if (length < 4) {
    hex = hex.padLeft(4, "0");
  }

  return '\\u$hex';
}

/**
 * Returns an underscored string.
 *
 * Example:
 *     print(underscore("DartVM DartCore"));
 *     => dart_vm dart_core
 */
String underscore(String string) {
  if (string == null) {
    throw new ArgumentError("string: $string");
  }

  if (string.length == 0) {
    return string;
  }

  var length = string.length;
  var sb = new StringBuffer();
  var separate = false;
  for (var i = 0; i < length; i++) {
    var s = string[i];
    var c = s.codeUnitAt(0);
    var flag = 0;
    if (c <= _ASCII_END) {
      flag = _ascii[c];
    }

    if (separate && flag & _UPPER != 0) {
      sb.write("_");
      sb.write(s);
      separate = true;
    } else {
      if (flag & _ALPHA_NUM != 0) {
        separate = true;
      } else if (flag & _UNDERSCORE != 0 && separate) {
        separate = true;
      } else {
        separate = false;
      }

      sb.write(s);
    }
  }

  return sb.toString().toLowerCase();
}

SparseBoolList _generateBool(List<int> ranges) {
  var list = new SparseBoolList();
  var length = ranges.length;
  for (var i = 0; i < length; i += 2) {
    list.addGroup(new GroupedRangeList<bool>(ranges[i], ranges[i + 1], true));
  }

  return list;
}
